{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport counterSlice from './counter/counterSlice';\nimport studentSlice from './student/studentSlice';\nimport { studentApi } from './student/student.service';\nexport const store = configureStore({\n  reducer: {\n    counter: counterSlice,\n    student: studentSlice,\n    [studentApi.reducerPath]: studentApi.reducer\n  },\n  middleware: getDefaultMiddleware => getDefaultMiddleware().concat(studentApi.middleware)\n});\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\n\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}","map":{"version":3,"names":["configureStore","counterSlice","studentSlice","studentApi","store","reducer","counter","student","reducerPath","middleware","getDefaultMiddleware","concat"],"sources":["/Users/hoangthang/Desktop/react/WD17307_WEB209/src/store-tk/index.ts"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit'\nimport counterSlice from './counter/counterSlice'\nimport studentSlice from './student/studentSlice'\nimport { studentApi } from './student/student.service'\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterSlice,\n    student : studentSlice,\n    [studentApi.reducerPath]: studentApi.reducer,\n  },\n  middleware: (getDefaultMiddleware) =>\n  getDefaultMiddleware().concat(studentApi.middleware),\n})\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,OAAOC,YAAY,MAAM,wBAAwB;AACjD,OAAOC,YAAY,MAAM,wBAAwB;AACjD,SAASC,UAAU,QAAQ,2BAA2B;AAEtD,OAAO,MAAMC,KAAK,GAAGJ,cAAc,CAAC;EAClCK,OAAO,EAAE;IACPC,OAAO,EAAEL,YAAY;IACrBM,OAAO,EAAGL,YAAY;IACtB,CAACC,UAAU,CAACK,WAAW,GAAGL,UAAU,CAACE;EACvC,CAAC;EACDI,UAAU,EAAGC,oBAAoB,IACjCA,oBAAoB,CAAC,CAAC,CAACC,MAAM,CAACR,UAAU,CAACM,UAAU;AACrD,CAAC,CAAC;;AAEF;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}